version: '2.1'

services:

  history:
    image: dojot/history:development
    restart: always
    depends_on:
      - mongodb
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'history'
      LOG_LEVEL: 'DEBUG'
    logging:
      driver: json-file
      options:
        max-size: 100m

  persister:
    image: dojot/persister:development
    volumes: 
      - ${DOJOT_MODULE_PYTHON}:/usr/src/venv/lib/python3.6/site-packages/dojot.module-0.0.1a5-py3.6.egg/dojot/module
    restart: always
    depends_on:
      - mongodb
      - keycloak
      - kafka
      - data-broker
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'persister'
      KAFKA_GROUP_ID: 'persister-group'
      LOG_LEVEL: 'DEBUG'
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongodb:
    image: dojot/mongo:3.2
    restart: always
    user: "mongodb"
    logging:
      driver: json-file
      options:
        max-size: 100m

  mosca-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m
  
  iotagent-mqtt:
    image: dojot/iotagent-mosca:development
    volumes: 
      - ${DOJOT_MODULE_NODEJS}:/opt/iot-agent/node_modules/@dojot/dojot-module
    depends_on:
      - mosca-redis
      - kafka
      - data-broker
      - keycloak
      - ejbca
    ports:
      - 1883:1883
      - 8883:8883
    restart: always
    environment:
      DOJOT_MANAGEMENT_USER: 'iotagent-mqtt'
      KAFKA_GROUP_ID: 'iotagent-mqtt-group'
      ALLOW_UNSECURED_MODE: 'true'
      MOSCA_TLS_DNS_LIST: 'localhost'
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker:
    image: dojot/data-broker:development
    volumes: 
    - ${DOJOT_MODULE_NODEJS}:/opt/data-broker/node_modules/@dojot/dojot-module
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
      - keycloak
    depends_on: 
      keycloak:
        condition: service_healthy
    environment:
      DOJOT_MANAGEMENT_USER: 'data-broker'
      KAFKA_GROUP_ID: 'data-broker-group'
      SERVICE_PORT: ${DATA_BROKER_SERVICE_PORT}
      DATA_BROKER_URL: 'http://data-broker:${DATA_BROKER_SERVICE_PORT}'
      LOG_LEVEL: 'info'
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager:
    image: dojot/device-manager:development
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      DEV_MNGR_CRYPTO_PASS: kamehameHA
      DEV_MNGR_CRYPTO_IV: 1234567890123456
      DEV_MNGR_CRYPTO_SALT: shuriken
      DBHOST: postgres
      DBUSER: devm
      DBPASS: devm
      LOG_LEVEL: INFO
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres:
    image: dojot/postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  # Prepare database, Bootstrap the database
  kong-migrations:
    image: dojot/kong:development
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 100m

  # Run any new migrations and Finish running any pending migrations after 'up'.
  kong-migrations-up:
    image:  dojot/kong:development
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 100m

  apigw:
    image: local/kong:development
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: debug
      # To enable HTTPs external, it is necessary to configure public certificates
      # issued by a public CA, such as lets encrypt in KONG_SSL_CERT.
      # KONG_SSL_CERT_KEY: /certs/example-external.key
      # KONG_SSL_CERT: /certs/example-external.crt
      # To enable HTTPs internal with mutual authentication, it is necessary to configure public certificates
      # issued by a EJBCA internal from dojot in KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE.
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE_KEY: /certs/example-internal.key
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE: /certs/example-internal.crt
      # Root cerficate from internal CA
      # KONG_NGINX_PROXY_PROXY_SSL_TRUSTED_CERTIFICATE: /certs/root-ca-internal.crt
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY: "on"
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY_DEPTH: "2"
    ports:
      - "8000:8000/tcp"
      # Proxy listen to HTTPS traffic (8443). services and routes must be configured to use the https protocol
      # Each service must have its certificate with Subject Alternative Name generated by dojot's EJBCA.
      #- "8443:8443/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    # Exposes certificates
    #volumes:
    #  - ./kong/certificates/:/certs/:Z
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-config:
    image: dojot/appropriate-curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z
  
  keycloak:
    image: local/keycloak:development
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8080/auth/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      - postgres
      - kafka
    ports:
      - "8080:8080"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin

  zookeeper:
    image: dojot/zookeeper:3.4
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: dojot/wurstmeister-kafka:2.12-2.1.1
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_NUM_PARTITIONS: 10
      JMX_PORT: 1099
    logging:
      driver: json-file
      options:
        max-size: 100m

  ejbca:
    image: dojot/ejbca-rest:development
    volumes: 
      - ${DOJOT_MODULE_PYTHON}:/usr/lib/python3.6/site-packages/dojot/module
    environment:
      DOJOT_MANAGEMENT_USER: 'ejbca'
      KAFKA_GROUP_ID: 'ejbca-group'
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  backstage:
    image: dojot/backstage:development
    restart: always
    depends_on:
      - postgres

# GUI to Kong Admin API - BEGIN
# Konga GUI will be available at http://localhost:1337
#
# konga:
#   image: dojot/pantsel_konga:0.14.7
#   depends_on:
#     - apigw
#     - mongodb
#   ports:
#     - 1337:1337
#   environment:
#     DB_ADAPTER: mongo
#     DB_DATABASE: konga
#     DB_HOST: mongodb
#     KONGA_LOG_LEVEL: info
#     NO_AUTH: "true"
#     KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga.js
#     NODE_ENV: production
#     BASE_URL: localhost
#   volumes:
#     - ./kong/konga.config.js:/konga.js:ro
#   restart: on-failure
#   logging:
#     driver: json-file
#     options:
#       max-size: 100m
#
# GUI to Kong Admin API - END
